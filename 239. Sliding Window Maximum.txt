You can find my solition here:https://leetcode.com/problems/sliding-window-maximum/solutions/3828415/java-solution-using-dequeue/



Intuition
We will be adding only possible candidates answers in dequeue



class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        Deque<Integer> d=new LinkedList<>();
        int n=nums.length;
        int ans[]=new int[n-k+1];
        //calculate max for first window
        for(int j=0;j<k;j++){
            while(!d.isEmpty() && nums[j]>nums[d.getLast()]){
                d.removeLast();
            }
          d.add(j);  
        }
        ans[0]=nums[d.getFirst()];
        int s=1;
        //calculate max for other windows
        for(int i=k;i<n;i++){
          while(!d.isEmpty() && nums[i]>nums[d.getLast()]){
                d.removeLast();
            }
          d.add(i); 
          if(i-k==d.getFirst()){
              d.removeFirst();
          } 
          ans[s]=nums[d.getFirst()];
          s++;
        }
        return ans;
    }
}

