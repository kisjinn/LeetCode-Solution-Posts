You can find my solution here: https://leetcode.com/problems/kth-smallest-element-in-a-bst/solutions/3862622/easy-java-solution/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int x=0;
    public int kthSmallest(TreeNode root, int k) {
        x=k;
        return kthSmallest(root);
    }
    private int kthSmallest(TreeNode A){
    //if left subtree is empty return -1
    if(A==null){
         return -1; 
    }
    int left = kthSmallest(A.left);
    //if left subttree return any root value that means we  found kth element
    if(left!=-1){
    return left;
     }
     //if left subttree return -1 that means we havent found kth element
     x--;
     //when k becomes 0 means we are currently at our required kth element, so return its value
     if(x==0){
     return A.val;
     }
     //if we havent return anything till yet  means we didnt find kth element from left subtree so search in right subtree
     return kthSmallest(A.right);
}
    
}

