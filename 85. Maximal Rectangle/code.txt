class Solution {
    public int maximalRectangle(char[][] matrix) {
    int[][] matri = new int[matrix.length][matrix[0].length];
        //convert char array into int array
    for (int i = 0; i < matrix.length; i++) {
        for(int s=0;s<matrix[0].length;s++){
          matri[i][s] = matrix[i][s]-'0';
        }
   }
      int[] current_row=matri[0];

      int ans=largestRectangleArea(current_row);
      for(int i=1;i<matri.length;i++){
          for(int j=0;j<matri[0].length;j++){
             if(matri[i][j]==1){
                 current_row[j]++;
             }
             else{
                 current_row[j]=0;
             }
          }
          ans=Math.max(largestRectangleArea(current_row),ans);
      }
      return ans;

      
    }
    private int largestRectangleArea(int[] heights) {
       int[] next= nextSmaller(heights);
       int[] prev= prevSmaller(heights);
       int area=Integer.MIN_VALUE;
       for(int i=0;i<heights.length;i++){
        int length=heights[i];
        area=Math.max(area,length*(next[i]-prev[i]-1));
       }
       return area;
    }
    //For each elements,calculate its previous smaller elements index i.e nearest smaller element index left to it
    private int[] prevSmaller(int[] heights) {
        int n=heights.length;
        int[] ans=new int[n];
        
        Stack<Integer> stack=new Stack<>();
        for(int i=0;i<n;i++){
        while(!(stack.isEmpty()) && heights[stack.peek()]>=heights[i]){
            stack.pop();
        }
        if(stack.isEmpty()){
            ans[i]=-1;
        }
        else{
            ans[i]=stack.peek();
        }
        stack.push(i);
        }
        return ans;
    }
        //For each elements,calculate its next smaller elements index i.e nearest smaller element index right to it
    private int[] nextSmaller(int[] heights) {
        int n=heights.length;
        int[] ans=new int[n];

        Stack<Integer> stack=new Stack<>();
        for(int i=n-1;i>=0;i--){
        while(!(stack.isEmpty()) && heights[stack.peek()]>=heights[i]){
            stack.pop();
        }
         //inserting/adding at start of list everytime to populate the list in the correct order.
        if (stack.isEmpty()) {
                ans[i]=n;
            } else {
                ans[i]=stack.peek();
            }
        stack.push(i);
        }
        return ans;
    }
}