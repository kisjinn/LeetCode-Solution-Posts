You can check my solution here: https://leetcode.com/problems/serialize-and-deserialize-binary-tree/solutions/3847649/java-solution-using-level-order-traversal/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 //Approach: Take n to replace -1 as in some cases -1 can be the node in tree itself
public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        if(root==null){
            return "";
        }
        StringBuilder sb=new StringBuilder();
        Queue<TreeNode> q=new LinkedList<>();
        q.add(root);
        while(!q.isEmpty()){
            TreeNode curr=q.poll();
            if(curr==null){
                sb.append("n ");
                continue;
            }
            sb.append(curr.val + " ");
            
            q.add(curr.left);
            q.add(curr.right);
            
        }
        return sb.toString();
        
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if(data.length()==0){
            return null;
        }
        //convert string into char array
        String [] c=data.split(" ");
        Queue<TreeNode> q=new LinkedList<>();
        //first value of string array will be the root of Tree so add it in queue
        //Initially curr and root will point to the same node
        TreeNode root=new TreeNode(Integer.parseInt(c[0]));
        q.add(root);
        for(int i=1;i<c.length;i++){
            TreeNode curr=q.poll();
            if(!c[i].equals("n")){
                TreeNode left=new TreeNode(Integer.parseInt(c[i]));
                curr.left=left;
                q.add(left);
                
            }
            if(!c[++i].equals("n")){
                TreeNode right=new TreeNode(Integer.parseInt(c[i]));
                curr.right=right;
                q.add(right);
            }


        }
        return root;
    }
}

