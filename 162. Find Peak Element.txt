Approach
1.if(nums[mid]>nums[mid+1] && nums[mid]>nums[mid-1]) then return mid
2.if(nums[mid]<nums[mid+1])the we will search in right side so s=mid+1
2.if(nums[mid]>nums[mid+1]) the we will search in left side so e=mid-1

Complexity
Time complexity:O(logN)

Space complexity:O(1)

Code
class Solution {
    public int findPeakElement(int[] nums) {
        int n=nums.length;
        if(n==1){
            return 0;
        }
        int s=1, e=n-2;
        if(nums[0]>nums[1]){
            return 0;
        }
        if(nums[n-1]>nums[n-2]){
            return n-1;
        }
        while(s<=e){
            int mid=s+((e-s)/2);
            if(nums[mid]>nums[mid-1] && nums[mid]>nums[mid+1]){
                return mid;
            }
            else if(nums[mid]<nums[mid+1]){
                s=mid+1;
            }
            else{
                e=mid-1;
            }

        }
        return 1;

        
    }
}

you can find my Solution here: https://leetcode.com/problems/find-peak-element/solutions/3823394/easy-java-solution-binary-search/