You can find my Solution here: https://leetcode.com/problems/binary-tree-postorder-traversal/solutions/3867371/java-solution-iterative-traversal-using-stack/

Complexity
Time complexity:O(N)

Space complexity:O(height of tree)

Code
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    class Pair{
        TreeNode node;
        int task;
        Pair(TreeNode x){
            node=x;
            task=1;
        }
    }
    public List<Integer> postorderTraversal(TreeNode root) {
        Stack<Pair> s=new Stack<>();
        List<Integer> list=new ArrayList<>();
        if(root==null){
            return list;
        }
        s.push(new Pair(root));
        while(!s.isEmpty()){
            Pair top=s.peek();
            TreeNode curr=top.node;
            if(top.task==1){
                if(curr.left!=null){
                    s.push(new Pair(curr.left));
                }
                top.task++;
            }
            else if(top.task==2){
                if(curr.right!=null){
                    s.push(new Pair(curr.right));
                }
              top.task++; 
            }
            else if(top.task==3){
                list.add(curr.val);
                top.task++;
            }
            else{
                s.pop();
            }
        }
        return list;
    }
}