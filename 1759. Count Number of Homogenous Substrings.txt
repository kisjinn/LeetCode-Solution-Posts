You can find my Solution here :https://leetcode.com/problems/count-number-of-homogenous-substrings/solutions/4266517/easy-java-solution/


Intuition
Number of substrings of a given string of length n = (n * (n + 1)) / 2

Code
class Solution {
    public int countHomogenous(String s) {
        final int MOD = 1000000007;
        int n = s.length();
        long ans = 0; // Use a long to avoid integer overflow
        int i = 0;

        while (i < n) {
            int x = 1;
        //measure length od substring with same characters
            while (i < n - 1 && s.charAt(i) == s.charAt(i + 1)) {
                x++;
                i++;
            }
            ans = (ans + (long)x * (x + 1) / 2) % MOD; //formula
            i++;
        }

        return (int)ans;
    }
}



Given a string s, return the number of homogenous substrings of s. Since the answer may be too large, return it modulo 109 + 7.

A string is homogenous if all the characters of the string are the same.

A substring is a contiguous sequence of characters within a string.

 

Example 1:

Input: s = "abbcccaa"
Output: 13
Explanation: The homogenous substrings are listed as below:
"a"   appears 3 times.
"aa"  appears 1 time.
"b"   appears 2 times.
"bb"  appears 1 time.
"c"   appears 3 times.
"cc"  appears 2 times.
"ccc" appears 1 time.
3 + 1 + 2 + 1 + 3 + 2 + 1 = 13.
Example 2:

Input: s = "xy"
Output: 2
Explanation: The homogenous substrings are "x" and "y".
Example 3:

Input: s = "zzzzz"
Output: 15
 

Constraints:

1 <= s.length <= 105
s consists of lowercase letters.




