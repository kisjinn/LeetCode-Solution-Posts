You can find my solution here: https://leetcode.com/problems/construct-binary-tree-from-preorder-and-postorder-traversal/solutions/3828762/easy-java-solution/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode constructFromPrePost(int[] preorder, int[] postorder) {
    if(postorder.length!=preorder.length){
            return null;
        }
        TreeNode ans=builtTree(postorder,preorder,0, postorder.length-1, 0, preorder.length-1);
        return ans;
    }
    //pos: postorder start index, poe=postorder end index, ps=preorder start index, pe=preorder end index
    private TreeNode builtTree(int[] postorder,int [] preorder, int pos, int poe, int ps, int pe){
        if(ps>pe || pos>poe){
            return null;
        }
 
    //ps th value will be the root of the tree
    TreeNode rut=new TreeNode(preorder[ps]);
    // Base case: when there is only one element in the subtree
        if (ps == pe) {
            return rut;
        }
    //search index of root+1 node in postorder list
   
    int rootIndex=search(postorder,preorder[ps+1]);
    //element from pos to rootIndex will be the elements on left 
    int elementsOnLeft=rootIndex-pos+1;
    //Build tree of left side
    rut.left=builtTree(postorder,preorder,pos,rootIndex,ps+1, ps+elementsOnLeft);

    rut.right=builtTree(postorder,preorder,rootIndex+1,poe-1,ps + elementsOnLeft + 1, pe);
    return rut;
    

    }
    private int search(int[] postorder, int target){
        for(int i=0;i<postorder.length;i++){
            if(postorder[i]==target){
                return i;
            }
        }
        return -1;

    }
}


************************************************************************************
Given two integer arrays, preorder and postorder where preorder is the preorder traversal of a binary tree of distinct values and postorder is the postorder traversal of the same tree, reconstruct and return the binary tree.

If there exist multiple answers, you can return any of them.

 

Example 1:


Input: preorder = [1,2,4,5,3,6,7], postorder = [4,5,2,6,7,3,1]
Output: [1,2,3,4,5,6,7]
Example 2:

Input: preorder = [1], postorder = [1]
Output: [1]
 

Constraints:

1 <= preorder.length <= 30
1 <= preorder[i] <= preorder.length
All the values of preorder are unique.
postorder.length == preorder.length
1 <= postorder[i] <= postorder.length
All the values of postorder are unique.
It is guaranteed that preorder and postorder are the preorder traversal and postorder traversal of the same binary tree.