https://leetcode.com/problems/construct-binary-search-tree-from-preorder-traversal/solutions/3858849/easy-java-solution-beats-100/


Intuition
The key point would be for below solution, for root.left pass root.val as bound and for root.right pass bound value as it is.

Complexity
Time complexity:O(N)


Code
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode bstFromPreorder(int[] preorder) { 
    //the key point would be for solution, for root.left pass root.val as bound and for root.right pass bound value as it is.
    return create(preorder,Integer.MAX_VALUE,new int[]{0});    
    }
    private TreeNode create(int[] arr, int bound,int[] i){
    if(i[0]==arr.length || arr[i[0]]>bound){
        return null;
    }
    TreeNode root=new TreeNode(arr[i[0]++]);
    root.left=create(arr, root.val, i);
    root.right=create(arr, bound, i);
    return root;
    }
}