# Intuition and Approach:
1.Rotated Sorted array consiste of 2 sorted subarrays part
e.g nums = [4,5,6,7,0,1,2] from index 0 to 3, subarray(4,5,6,7) is sorted
                           from index 4 to 6, subarray(0,1,2) is sorted
2.nums[0] is the reference elemenet is the one with which we can compare our mid
if nums[mid] > nums[0] means mid is in part 1
if nums[mid]< nums[0] means mid is in part 2


We have 3 scenarios:
1.When nums[mid]==target then return mid
2.When - mid is in part 1 and target is in part 2, move to right s=mid+1
       - mid is in part 1 and target is in part 1, move to left e=mid-1
3.When - mid is in part 2 and target is in part 1, move to left e=mid-1
       - mid is in part 2 and target is in part 2, move to right s=mid+1


# Complexity
- Time complexity: O(logN)

- Space complexity:O(1)



class Solution {
    public int search(int[] nums, int target) {
        int n = nums.length;
        int s = 0, e = n - 1;
        
        while (s <= e) {
            int mid = s + (e - s) / 2;
            
            if (nums[mid] == target) {
                return mid;
            }
            
            // When mid is in part 1
            if (nums[mid] >= nums[0]) {
                // When target is in part 2 or target is greater than nums[mid], move to the right
                if (target < nums[0] || target > nums[mid]) {
                    s = mid + 1;
                }
                // When target is in part 1
                else {
                    e = mid - 1;
                }
            }
            // When mid is in part 2
            else {
                // When target is in part 1 or target is lessgreater than nums[mid], move to the left
                if (target >= nums[0] || target < nums[mid]) {
                    e = mid - 1;
                }
                // When target is in part 2
                else {
                    s = mid + 1;
                }
            }
        }
        return -1;
    }
}

You can find my Solution here: https://leetcode.com/problems/search-in-rotated-sorted-array/solutions/3823705/java-solution-100-efficient/
