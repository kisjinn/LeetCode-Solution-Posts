You can find my Solution here:https://leetcode.com/problems/n-queens/solutions/3957916/java-solution-backtracking/

# Intuition
1.We can't have more than one queen in same row and column
2.We can't have more than one queen on same diagonals.

# Approach
Create matrix[n][n] for placing queen
1.Start by placing queen at position([0][0]) of 0th row and we will try for every index of 0th row, So we will traverse column by column
2.Suppose, we placed the queen at mat[0][0] then in same row, we cant have another queen. So, check for 1st row, if we can place the queen at any index of 1st row
3.Recursively, check for all the remaining rows.
4.Lastly, if row==n that means we have successfulyy placed 'n' queens in matrix
5.Explore other possibilities by placing the queen at another positions([0][1],[0][2]....[0][n-1]) of 0th row

# Complexity
- Time complexity:O(n^n)

- Space complexity:O(n)




class Solution {
    List<List<String>> ans=new ArrayList<>();
	public List<List<String>> solveNQueens(int n){
        //create matrix to place the queen
        int[][]mat=new int[n][n];
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                mat[i][j]=0;
            }
        }
        boolean []c=new boolean[n];
        boolean []diag1=new boolean[2*n+1]; //(diagonals like '/')
        boolean []diag2=new boolean[2*n+1]; //(diagonals like '\')
        nQueen(mat,n,0,c,diag1,diag2);
        return ans;
	}


    void nQueen(int[][] mat,int A, int row,boolean[]c,boolean[]diag1,boolean[]diag2){
        if(row==A){
            ArrayList<String> temp=new ArrayList<>();
            //store matrix as string in temp
            for(int i=0;i<mat.length;i++){
                String str="";
                for(int j=0;j<mat[0].length;j++){
                    if(mat[i][j]==1){
                    str= "Q"+str;
                    }
                    else{
                    str= "."+str;
                    }       
                }
                temp.add(str);
            }
            ans.add(temp);
        }
        //We will start putting queen on 0th row indices so we will go column by column
        for(int col=0;col<A;col++){
            //we will check if queen is placed previously on same col , diagonals(both)
            boolean safe= (c[col]==false && diag1[row-col+mat.length-1]==false && diag2[row+col]==false);
            //if safe = true means we can place queen at that position
            if(safe==true){
             mat[row][col]=1;
             c[col]=true;
             diag1[row-col+mat.length-1]=true;
             diag2[row+col]=true;
             //now, we will try to put queen in next row
             nQueen(mat,A,row+1,c,diag1,diag2);
             //After exploring every possibility from given position we will restore the state so as to explore another possibilities for next position
             mat[row][col]=0;
             c[col]=false;
             diag1[row-col+mat.length-1]=false;
             diag2[row+col]=false;
            }
        }
    }
}


The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.

Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.

 

Example 1:


Input: n = 4
Output: [[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]
Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above
Example 2:

Input: n = 1
Output: [["Q"]]
 

Constraints:

1 <= n <= 9

