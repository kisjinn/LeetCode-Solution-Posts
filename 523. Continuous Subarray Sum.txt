You can check my solution here: https://leetcode.com/problems/continuous-subarray-sum/solutions/3833215/java-solution-using-hashmap/

Intuition:
1.prefix sum is a common technique.
2.Another thing is if sum[0, i] % K == sum[0, j] % K, sum[i + 1, j] is divisible by K.


Lets say s2=sum[0, j] ans s1=sum[0, i] 

Divident=divisor*quotient + remainder 
s2=kn+ x
s1=km+ x

s2-s1=k(n-m)
that means the subarray between s1.end to s2.end will be multiple of k that means it will be divisible by k

Approach
follow the following steps:

first we have declared a unordered map of key=remainde and value=index.
Iterating over array,check if remainder is already present or not, then store remainder with it's index value.
(Note: if map already contains rem then no need to update its index as we have to return true only if subarray with size >= 2
check if we have found the same remainder again and the subarray size is greater than or equal 2)
now returns true. 


Complexity
Time complexity: O(n)
Space complexity: O(n)
Code:

class Solution {
    public boolean checkSubarraySum(int[] nums, int k) {
        HashMap<Integer, Integer> map=new HashMap<>();
        int sum=0, rem=0,ans=0;
        for(int i=0;i<nums.length;i++){
         sum+=nums[i];
         rem=sum%k;
        if (rem == 0 && i > 0) {
            return true; // If the current remainder is zero and there are at least 2 elements
        }
         if(map.containsKey(rem)){
              if((i-map.get(rem))>=2){
                 return true;
              }
             
         }
         else{
             map.put(rem,i);
         }
        
        }
        return false;
    }
}



Given an integer array nums and an integer k, return true if nums has a good subarray or false otherwise.

A good subarray is a subarray where:

its length is at least two, and
the sum of the elements of the subarray is a multiple of k.
Note that:

A subarray is a contiguous part of the array.
An integer x is a multiple of k if there exists an integer n such that x = n * k. 0 is always a multiple of k.
 

Example 1:

Input: nums = [23,2,4,6,7], k = 6
Output: true
Explanation: [2, 4] is a continuous subarray of size 2 whose elements sum up to 6.
Example 2:

Input: nums = [23,2,6,4,7], k = 6
Output: true
Explanation: [23, 2, 6, 4, 7] is an continuous subarray of size 5 whose elements sum up to 42.
42 is a multiple of 6 because 42 = 7 * 6 and 7 is an integer.
Example 3:

Input: nums = [23,2,6,4,7], k = 13
Output: false
 

Constraints:

1 <= nums.length <= 105
0 <= nums[i] <= 109
0 <= sum(nums[i]) <= 231 - 1
1 <= k <= 231 - 1






